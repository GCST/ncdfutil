#!/usr/bin/perl -w

#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !MODULE: ncCodeWrite
#
# !DESCRIPTION: This Perl script creates Fortran code to write data
#  to an open netCDF file.  Fortran calls to NcdfUtilities routines are
#  written to the output file.
#\\
#\\
# !USES:
#
  require 5.003;        # need this version of Perl or newer
  use strict 'refs';    # Do not allow symbolic references
  use strict 'subs';    # Treat all barewords as syntax errors 
#
# !PUBLIC DATA MEMBERS:
#
  $F_ID   = "";         # netCDF file ID
  %F_DIMS = ();         # Hash to translate netCDF dim to Fortran dims
#
# !CALLING SEQUENCE:
# ncCodeCreate RESOURCE-FILE-NAME
#
# !REVISION HISTORY: 
#  27 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: trim
#
# !DESCRIPTION:  Routine trim removes leading and trailing whitespace from
#  a string (analogous to IDL's Strtrim( str, 2 ) command).
#\\
#\\
# !INTERFACE:
#
sub trim($) {
#
# !CALLING SEQUENCE:
# $string = &trim( $string );
#
# !REMARKS:
#  Found online at this URL:
#  http://www.somacon.com/p114.php
#
# !REVISION HISTORY:
#  27 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC

  # Shift the @_ array 
  my $string = shift;

  # Remove leading whitespace
  $string    =~ s/^\s+//;

  # Remove trailing whitespace
  $string    =~ s/\s+$//;

  # Return
  return( $string );
}
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: splitLine
#
# !DESCRIPTION:  Routine splitLine splits a line on a given delimiter, and
#  strips white space.  Convenience wrapper for the Perl "split" function.
#\\
#\\
# !INTERFACE:
#
sub splitLine($$) {
#
# !INPUT PARAMETERS:
#
  # Line to be split, and the delimeter character
  # Don't strip the white from $value if $noSplitVal==1
  my( $line, $delim ) = @_;
#
# !CALLING SEQUENCE:
# ( $name, $value ) = &splitLine( $line );
#
# !REVISION HISTORY:
#  27 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  # Split the line
  my @subStr = split( $delim, $line );
  my $name   = &trim( $subStr[0] );
  my $value  = &trim( $subStr[1] );
 
  # Return substrings
  return( $name, $value );
}
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: readRcFile
#
# !DESCRIPTION:  Routine readRcFile reads the resource file which defines
#  the variables and attributes to be written to the netCDF file.
#\\
#\\
# !INTERFACE:
#
sub readRcFile($) {
#
# !INPUT PARAMETERS:
#
  # $fileName : File containing default settings to be read
  my ( $fileName ) = @_;
#
# !CALLING SEQUENCE:
# &readRcFile( RESOURCE-FILE-NAME );
#
# !REVISION HISTORY:
#  27 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my $cmdFile = "";
  my $line    = "";
  my @lines   = ();
  my $name    = "";

  #----------------------------------------------
  # Read variable settings from the file
  #----------------------------------------------
  open( I, "<$fileName" ) or die "Cannot open resource file $fileName!\n";
  chomp( @lines = <I> );
  close( I );

  #----------------------------------------------
  # Write Fortran commands to the output file
  #----------------------------------------------
  
  # Get the name of the output file
  foreach $line ( @lines ) {
    if ( $line =~ 'Fortran Write File' ) {
      ( $name, $cmdFile ) = &splitLine( $line, '=' );
    }
  }
      
  # Open the file that will ho
  open( O, ">$cmdFile" ) or die "Cannot open output file $cmdFile!\n";

  # Pass thru @lines array so that we can declare Fortran variables
  &writeFortranVars( \*O, @lines );
#
#  # Pass thru @lines array again to write 
#  &writeFortranCalls( \*O, @lines );

  #----------------------------------------------
  # Cleanup and quit
  #----------------------------------------------

  # Close output file
  close( O );

  # Return
  return( 0 );
}
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: writeFortranVars
#
# !DESCRIPTION:  Routine writeFortranVars writes all of the necessary
#  Fortran variables for using the NcdfUtilities routines.
#\\
#\\
# !INTERFACE:
#
sub writeFortranVars($@) {
#
# !INPUT PARAMETERS:
#
  # $O     : File handle 
  # @lines : Contents of the resource file
  my ( $O, @lines ) = @_;
#
# !CALLING SEQUENCE:
# @lines = &readRcFile( FILENAME );
#
# !REVISION HISTORY:
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/doGeos5
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my @subStr   = ();
  my $name     = "";
  my $value    = "";
  my $varName  = "";
  my $varSize  = "";
  my $varType  = "";
  my $varDim   = "";
  my $nDims    = "";
  my @dims     = ();
  my $dimDef   = "";
  my $txt      = "";

  #-------------------------------------------------------
  # Write USE statements 
  #-------------------------------------------------------
  $txt  = <<EOF;
      ! Modules for netCDF write
      USE m_netcdf_io_create
      USE m_netcdf_io_define
      USE m_netcdf_io_get_dimlen
      USE m_netcdf_io_write
      USE m_netcdf_io_close

      IMPLICIT NONE
      PRIVATE

\#     include "netcdf.inc"

      !=================================================================
      ! Variable declarations
      !=================================================================

EOF

  # Loop thru the LINES array
  for ( my $i = 0; $i < scalar( @lines ); $i++ ) {

    # Skip separator line
    if ( $lines[$i] eq '#' ) {
      # Do nothing
    }

    #----------------------------------------------------
    # FILENAME section
    #----------------------------------------------------
    elsif ( $lines[$i] =~ '!FILENAME:' ) {

      while ( $lines[++$i] ne '' ) {

	#  Get the dimension name and its value
	( $name, $value ) = &splitLine( $lines[$i], '=' );
		
	if ( $name =~ 'netCDF FileHandle' ) { 
	  $F_ID = $value; 
	  $txt .= "      ! netCDF file ID\n";
	  $txt .= "      INTEGER :: $F_ID\n";
	}
      }
    }

    #----------------------------------------------------
    # DIMENSIONS section
    #----------------------------------------------------
    elsif ( $lines[$i] =~ '!DIMENSIONS:' ) {

      while ( $lines[++$i] ne '' ) {

	#  Get the dimension name and its value
	( $name, $value ) = &splitLine( $lines[$i], '=' );
				# 
	# Store the value in a hash under its name
	$F_DIMS{$name} = $value;
      }
    }

    #----------------------------------------------------
    # VARIABLES section
    #----------------------------------------------------
    elsif ( $lines[$i] =~ '!VARIABLES:' ) {

      # Add a comment
      $txt .= "\n      ! Data arrays\n";

      while ( $lines[++$i] ne '' ) {

	# Skip comment characters
	if ( !( $lines[$i] =~ '#' ) ) { 

	  # Split the line 
	  ( $name, $value ) = &splitLine( $lines[$i], '=' );

	  # If the name field does not have a semicolon
	  # then it is a variable name and not an attribute
	  if ( !( $name =~ ':' ) ) { 

	    # Find the variable type and variable dimension(s)
	    ( $varType, $varDim ) = &splitLine( $value, '::' );
	    if ( $varType =~ 'REAL' ) { $varType = "$varType "; }
	    
	    # Get dimension information
	    @dims = split( ',', $varDim );
	    $nDims = scalar( @dims );

	    # Make 
	    $dimDef = "(";
	    for ( my $i=0; $i<$nDims; $i++ ) { 
	      while( my ( $key, $val ) = each( %F_DIMS ) ) {
		if ( $key =~ $dims[$i] ) {
		  $dimDef .= "$val";
		  if ( $i < $nDims-1 ) { $dimDef .= ","; }
		}
	      }	
	    }			
	    $dimDef .= ")";

	    # Definition string
	    $txt .= "      $varType :: $name$dimDef\n";
	  }			
	}		      
      }
    }

  }

  #-------------------------------------------------------
  # OTHER VARIABLES section
  #-------------------------------------------------------
  $txt .= "\n      ! Arrays for starting g points, and var sizes\n";
  $txt .= "      INTEGER :: st1d(1), ct1d(1)\n";
  $txt .= "      INTEGER :: st2d(2), ct2d(2)\n";
  $txt .= "      INTEGER :: st3d(3), ct3d(3)\n";
  $txt .= "      INTEGER :: st4d(4), ct4d(4)\n";
  $txt .= "      INTEGER :: st4d(5), ct4d(5)\n";
  print $O "$txt\n";

  # Return
  return( 0 );
}
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: writeFortranCalls
#
# !DESCRIPTION:  Routine getDefaults reads the default values for 
#  input quantities.
#\\
#\\
# !INTERFACE:
#
sub writeFortranCalls($@) {
#
# !INPUT PARAMETERS:
#
  # $O     : File handle 
  # @lines : Contents of the resource file
  my ( $O, @lines ) = @_;
#
# !REVISION HISTORY:
#  27 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my $varName  = "";
  my $varSize  = "";
  my $varType  = "";
  my $varDim   = "";
  my $attName  = "";
  my $attValue = "";
  my $NF_TYPE  = "";
  my $nDims    = "";
  my @dims     = ();
  my $dimArr   = "";
  my $dimDef   = "";
  my $txt      = "";

  # Loop thru each line in the file
  for ( my $i = 0; $i < scalar( @lines ); $i++ ) {
    				
    # Skip separator line
    if ( $lines[$i] eq '#' ) {
      # Do nothing
    }

    #----------------------------------------------------
    # VARIABLES section
    #----------------------------------------------------
    elsif ( $lines[$i] =~ '!VARIABLES:' ) {

      # Write fortran calls to define variables
      while ( $lines[++$i] ne '' ) {
	if ( !( $lines[$i] =~ '#' ) ) { 

	  # Split the line on the equals sign
	  my( $name, $value ) = &splitLine( $lines[$i], '=' );

	  # If the $name field lacks a semicolon, then it is the variable name
	  if ( !( $name =~ ':' ) ) {

	    # Find the variable type and variable dimension(s)
	    ( $varType, $varDim ) = &splitLine( $value, '::' );

	    # Get dimension information
	    @dims = split( ',', $varDim );
	    $nDims = scalar( @dims );
#
#	    if ( nDims == 1 ) {
#	      $txt .= "      st1d = (/  /) \n:'
#	    }
#
#
	  }	  
	}
      }
    }
  }

  #-------------------------------------------------------
  # Add a spacer comment to the Fortran code
  #-------------------------------------------------------
  print $O "$txt\n";

  # Return 
  return( 0 );
}
##EOP
##------------------------------------------------------------------------------
##          Harvard University Atmospheric Chemistry Modeling Group            !
##------------------------------------------------------------------------------
##BOP
##
## !IROUTINE: handleVarialbes
##
## !DESCRIPTION:  Routine handleVariables writes the proper Fortran calls
##  to NcdfUtilities routines for defining variables and variable attributes.
##\\
##\\
## !INTERFACE:
##
#sub handleVariables($$) {
##
## !INPUT PARAMETERS:
##
#  # $fileName : File containing default settings to be read
#  my ( $O, $line ) = @_;
##
## !CALLING SEQUENCE:
## @lines = &readRcFile( FILENAME );
##
## !REVISION HISTORY:
##  27 Jan 2012 - R. Yantosca - Initial version
##EOP
##------------------------------------------------------------------------------
##BOC
##
## !LOCAL VARIABLES:
##
#  my $varName  = "";
#  my $varSize  = "";
#  my $varType  = "";
#  my $varDim   = "";
#  my $attName  = "";
#  my $attValue = "";
#  my $NF_TYPE  = "";
#  my $nDims    = "";
#  my @dims     = ();
#  my $dimArr   = "";
#  my $dimDef   = "";
#  my $txt      = "";
#
#  # Split the line on the equals sign
#  my( $name, $value ) = &splitLine( $line, '=' );
#
#  #-----------------------------------------------------------------------
#  # If the $name field has a semicolon, then it is an attribute
#  #-----------------------------------------------------------------------
#  if ( $name =~ ':' ) { 
#
#    # Get The variable name and attribute name
#    ( $varName, $attName ) = &splitLine( $name, ':' );
#
#    # Attribute value
#    $attValue = $value;
# 
#    # Write commands to disk
#    $txt = <<EOF;
#      ! Define the $varName:$attName attribute
#      a_name = "$attName"
#      a_val  = "$attValue"
#      CALL NcDef_Var_Attributes( $F_ID, vId, TRIM(a_name), TRIM(a_val) )
#EOF
#    print $O "$txt\n";
#  }
#
#  #-----------------------------------------------------------------------
#  # If the $name field lacks a semicolon, then it is the variable name
#  #-----------------------------------------------------------------------
#  else {
#
#    # Get the variable name
#    $varName = $name; 
#   
#    # Find the variable type and variable dimension(s)
#    ( $varType, $varDim ) = &splitLine( $value, '::' );
#    $varType =~ s/\*//g;
#
#    # Define the NF_TYPE for the output
#    if    ( $varType =~ 'REAL8'     ) { $NF_TYPE = "NF_DOUBLE"; }
#    if    ( $varType =~ 'DOUBLE'    ) { $NF_TYPE = "NF_DOUBLE"; }
#    elsif ( $varType =~ 'REAL4'     ) { $NF_TYPE = "NF_FLOAT";  }
#    elsif ( $varType =~ 'FLOAT'     ) { $NF_TYPE = "NF_FLOAT";  }
#    elsif ( $varType =~ 'INTEGER'   ) { $NF_TYPE = "NF_INT";    }
#    elsif ( $varType =~ 'CHARACTER' ) { $NF_TYPE = "NF_CHAR";   }
#
#    # Get dimension information
#    @dims = split( ',', $varDim );
#    $nDims = scalar( @dims );
#
#    # Dimension array used in call to NcDef_Variable
#    $dimArr = "var$nDims"."d";
#    $dimDef = "$dimArr = (/ ";
#    for ( my $i=0; $i<$nDims; $i++ ) { 
#      $dimDef .= "id_$dims[$i]";
#      if ( $i < $nDims-1 ) { $dimDef .= ", "; }
#    }	
#    $dimDef .= " /)";
#
#    # Write commands to disk
#    $txt = <<EOF2;
#      !--------------------------------
#      ! VARIABLE: $varName
#      !--------------------------------
#
#      ! Define the $varName variable
#      vId   = vId + 1
#      $dimDef
#      CALL NcDef_Variable( $F_ID, '$varName', $NF_TYPE, $nDims, $dimArr, vId )
#EOF2
#    print $O "$txt\n";
#
#  }
#
#  # Return
#  return( 0 );
#}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: main
#
# !DESCRIPTION: Routine main is the driver routine for the ncCodeDef script.
#\\
#\\
# !INTERFACE:
#
sub main() {
#
# !CALLING SEQUENCE:
#  &main();
#
# !REVISION HISTORY:
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/doGeos5
#EOP
#------------------------------------------------------------------------------
#BOC

  # Error check arguments
  if ( scalar( @ARGV ) == 0 ) { 
    print "Usage: ncCodeDef RESOURCE-FILE\n"; 
    exit(1);
  }

  # Get default values
  &readRcFile( $ARGV[0] );

  # Return normally
  return( 0 );
}
#EOC

#------------------------------------------------------------------------------

# Start main program
main();

# Exit normally
exit(0);
