#!/usr/bin/perl -w

#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !MODULE: ncCodeRead
#
# !DESCRIPTION: This Perl script creates Fortran code to read variables
#  and attributes from a netCDF file.  Calls are made to routines from
#  the NcdfUtilities package.  
#\\
#\\
# !USES:
#
  require 5.003;                        # need this version of Perl or newer
  use English;                          # Use English language
  use Carp;                             # Get detailed error messages
  use strict 'refs';                    # Do not allow symbolic references
  use strict 'subs';                    # Treat all barewords as syntax errors 
  use StrTrim qw( &trim &splitLine );   # Get string handling routines
#
# !PUBLIC DATA MEMBERS:
#
  $F_ID   = "";         # netCDF file ID
  %F_DIMS = ();         # Hash to translate netCDF dim to Fortran dims
#
# !CALLING SEQUENCE:
# ncCodeCreate RESOURCE-FILE-NAME
#
# !REVISION HISTORY: 
#  30 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: readRcFile
#
# !DESCRIPTION:  Routine readRcFile reads the resource file which defines
#  the variables and attributes to be written to the netCDF file.
#\\
#\\
# !INTERFACE:
#
sub readRcFile($) {
#
# !INPUT PARAMETERS:
#
  # $fileName : File containing default settings to be read
  my ( $fileName ) = @_;
#
# !CALLING SEQUENCE:
# &readRcFile( RESOURCE-FILE-NAME );
#
# !REVISION HISTORY:
#  30 Jan 2012 - R. Yantosca - Initial versin
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my $cmdFile = "";
  my $line    = "";
  my @lines   = ();
  my $name    = "";

  #--------------------------------------------------
  # Read variable settings from the resource file
  #--------------------------------------------------
  open( I, "<$fileName" ) or die "Cannot open $fileName!\n";
  chomp( @lines = <I> );
  close( I );

  #--------------------------------------------------
  # Write Fortran commands to the output file
  #--------------------------------------------------
  
  # Pre-get a few quantities before creating the
  # output file with the fortran code
  foreach $line ( @lines ) {

    # Name of output file w/ Fortran code
    if ( $line =~ 'Fortran Read File' ) {
      ( $name, $cmdFile ) = &splitLine( $line, '=' );
    }

    # NetCDF file ID (aka filehandle)
    if ( $line =~ 'netCDF FileHandle' ) {
      ( $name, $F_ID ) = &splitLine( $line, '=' );
    }
  }
      
  # Open the file that will ho
  open( O, ">$cmdFile" ) or die "Cannot open $cmdFile\n";

  # Pass thru @lines array so that we can declare Fortran variables
  &writeFortranVars( \*O, @lines );

  # Pass thru @lines array again to write 
  &writeFortranCalls( \*O, @lines );

  #--------------------------------------------------
  # Cleanup and quit
  #--------------------------------------------------

  # Close output file
  close( O );

  # Return
  return( 0 );
}
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: writeFortranVars
#
# !DESCRIPTION:  Routine writeFortranVars writes all of the necessary
#  Fortran variables for using the NcdfUtilities routines.
#\\
#\\
# !INTERFACE:
#
sub writeFortranVars($@) {
#
# !INPUT PARAMETERS:
#
  # $O     : File handle 
  # @lines : Contents of the resource file
  my ( $O, @lines ) = @_;
#
# !CALLING SEQUENCE:
# @lines = &readRcFile( FILENAME );
#
# !REVISION HISTORY:
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/doGeos5
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my @subStr = ();
  my $name   = "";
  my $value   = "";
  my $varName = "";
  my $varSize = "";
  my $varType = "";
  my $varDim  = "";
  my $nDims   = "";
  my @dims    = ();
  my $dimDef  = "";
  my $txt     = "";

  #-------------------------------------------------------
  # Write USE statements 
  #-------------------------------------------------------
  $txt .= <<EOF;
!EOC
!------------------------------------------------------------------------------
!          Harvard University Atmospheric Chemistry Modeling Group            !
!------------------------------------------------------------------------------
!BOP
!
! !IROUTINE: read\_netcdf\_file
!
! !DESCRIPTION: Routine to read variables and attributes from a netCDF
!  file.  This routine was automatically generated by the Perl scripts in the 
!  NcdfUtilities/perl directory.
!\\
!\\
! !INTERFACE:
!
      SUBROUTINE READ_NETCDF_FILE( $F_ID )
!
! !USES:
!
      ! Modules for netCDF read
      USE m_netcdf_io_create
      USE m_netcdf_io_read
      USE m_netcdf_io_readattr
      USE m_netcdf_io_close

      IMPLICIT NONE

\#     include "netcdf.inc"
!
! !OUTPUT PARAMETERS:
!   
      INTEGER, INTENT(IN) :: $F_ID    ! netCDF file ID
!
! !REMARKS:
!  Assumes that you have:
!  (1) A netCDF library (either v3 or v4) installed on your system
!  (2) The NcdfUtilities package (from Bob Yantosca) source code
!                                                                             .
!  Although this routine was generated automatically, some further
!  hand-editing may be required (i.e. to  specify the size of parameters, 
!  and/or to assign values to variables.  Also, you can decide how to handle
!  the variable attributes (or delete calls for reading attributes that you
!  do not need).
!
! !REVISION HISTORY:
!  30 Jan 2012 - R. Yantosca - Initial version
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:
!
EOF

  #-------------------------------------------------------
  # Add spacer text to the file
  #-------------------------------------------------------
  $txt .= <<EOF;
      !=================================================================
      ! Read data from netCDF file
      !=================================================================

EOF

  # Loop thru the LINES array
  for ( my $i=0; $i<scalar( @lines ); $i++ ) {

    # Skip separator line
    if ( $lines[$i] eq '#' ) {
      # Do nothing
    }

    #----------------------------------------------------
    # DIMENSIONS section
    #----------------------------------------------------
    elsif ( $lines[$i] =~ '!DIMENSIONS:' ) {

      while ( $lines[++$i] ne '' ) {

	#  Get the dimension name and its value
	( $name, $value ) = &splitLine( $lines[$i], '=' );
				# 
	# Store the value in a hash under its name
	$F_DIMS{$name} = $value;
      }
    }

    #----------------------------------------------------
    # VARIABLES section
    #----------------------------------------------------
    elsif ( $lines[$i] =~ '!VARIABLES:' ) {

      # Add a comment
      $txt .= "      ! Data arrays\n";

      while ( $lines[++$i] ne '' ) {

	# Skip comment characters
	if ( !( $lines[$i] =~ '#' ) ) { 

	  # Split the line 
	  ( $name, $value ) = &splitLine( $lines[$i], '=' );

	  # If the name field does not have a semicolon
	  # then it is a variable name and not an attribute
	  if ( !( $name =~ ':' ) ) { 

	    # Find the variable type and variable dimension(s)
	    ( $varType, $varDim ) = &splitLine( $value, '::' );
	    if ( $varType =~ 'REAL' ) { $varType = "$varType "; }
	    
	    # Get dimension information
	    @dims = split( ',', $varDim );
	    $nDims = scalar( @dims );

	    # Create the Fortran dimension string that is used to declare 
	    # the variable, i.e. (IIPAR,JJPAR,1).  Use the Perl hash %F_DIMS 
	    # to refer to the correponding value for each netCDF dimension.
	    $dimDef = "(";
	    for ( my $i=0; $i<$nDims; $i++ ) { 
	      while( my ( $key, $val ) = each( %F_DIMS ) ) {
		if ( $key =~ $dims[$i] ) {
		  $dimDef .= "$val";
		  if ( $i < $nDims-1 ) { $dimDef .= ","; }
		}
	      }	
	    }			
	    $dimDef .= ")";

	    # Definition string
	    $txt .= "      $varType            :: $name$dimDef\n";
	  }			
	}		      
      }
    }

  }

  #-------------------------------------------------------
  # OTHER VARIABLES section
  #-------------------------------------------------------
  $txt .= <<EOF2;

      ! Variable and attribute names
      CHARACTER(LEN=255) :: v_name    ! netCDF variable name 
      CHARACTER(LEN=255) :: a_name    ! netCDF attribute name
      CHARACTER(LEN=255) :: a_val     ! netCDF attribute value

      ! Arrays for starting points and variable sizes
      INTEGER            :: st1d(1), ct1d(1)
      INTEGER            :: st2d(2), ct2d(2)
      INTEGER            :: st3d(3), ct3d(3)
      INTEGER            :: st4d(4), ct4d(4)
      INTEGER            :: st5d(5), ct5d(5)
      INTEGER            :: st6d(6), ct6d(6)
EOF2
  print $O "$txt\n";

  # Return
  return( 0 );
}
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: writeFortranCalls
#
# !DESCRIPTION:  Routine getDefaults reads the default values for 
#  input quantities.
#\\
#\\
# !INTERFACE:
#
sub writeFortranCalls($@) {
#
# !INPUT PARAMETERS:
#
  # $O     : File handle 
  # @lines : Contents of the resource file
  my ( $O, @lines ) = @_;
#
# !REVISION HISTORY:
#  30 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my $attName  = "";
  my $varName  = "";
  my $varDim   = "";
  my $varType  = "";
  my $nDims    = "";
  my $start    = "";
  my $count    = "";
  my @dims     = ();
  my $txt      = "";

  #------------------------------------------------------
  # Add spacer text to the file
  #------------------------------------------------------



  # Loop thru each line in the file
  for ( my $i = 0; $i < scalar( @lines ); $i++ ) {
    				
    # Skip separator line
    if ( $lines[$i] eq '#' ) {
      # Do nothing
    }

    #----------------------------------------------------
    # VARIABLES section
    #----------------------------------------------------
    elsif ( $lines[$i] =~ '!VARIABLES:' ) {

      # Write fortran calls to define variables
      while ( $lines[++$i] ne '' ) {
	if ( !( $lines[$i] =~ '#' ) ) { 

	  # Split the line on the equals sign
	  my( $name, $value ) = &splitLine( $lines[$i], '=' );

          #----------------------------------------------
	  # If the $name field has a semicolon, 
	  # then it's a variable attribute
	  #----------------------------------------------
	  if ( $name =~ ':' ) {

	    # Split into the variable name and attribute name
	    ( $varName, $attName ) = &splitLine( $name, ':' );

	    # Create the text
	    $txt .= <<EOF;
      ! Read the $varName:$attName attribute
      v_name = '$varName'
      a_name = '$attName'
      CALL NcGet_Var_Attributes( $F_ID, TRIM(v_name), TRIM(a_name) , a_val )

EOF
	  }

          #--------------------------------------------
          # If the $name field lacks a semicolon, 
          # then it's the variable name
	  #--------------------------------------------
          else {

	    # Add spacer text
	    $txt  .= "      !----------------------------------------\n";
	    $txt  .= "      ! VARIABLE: $name\n";
	    $txt  .= "      !----------------------------------------\n\n";

	    # Find the variable type and variable dimension(s)
	    ( $varType, $varDim ) = &splitLine( $value, '::' );

	    # Get dimension information
	    @dims = split( ',', $varDim );
	    $nDims = scalar( @dims );

	    # Create the start array
	    $start = "st$nDims"."d";
	    $txt  .= "      ! Read the $name variable\n";
	    
	    $txt  .= "      $start   = (/ ";
	    for ( my $j=0; $j<$nDims; $j++ ) { 
	      $txt .= "1";
	      if ( $j < $nDims-1 ) { $txt .= ", "; }
	    }
	    $txt  .= " /)\n";

	    # Create the count array
	    $count = "ct$nDims"."d";
	    $txt  .= "      $count   = (/ ";
	    for ( my $j=0; $j<$nDims; $j++ ) { 
	      while( my( $key, $val ) = each( %F_DIMS ) ) {
		if ( $key =~ $dims[$j] ) {
		  $txt .= "$val";
		  if ( $j < $nDims-1 ) { $txt .= ", "; }
		}
	      }
	    }
	    $txt  .= " /)\n";

	    # Create the call to NcWr
	    $txt  .= <<EOF2;
      v_name = '$name'
      CALL NcRd( $name, $F_ID, TRIM(v_name), $start, $count )

EOF2
          }
	}
      }
    }
  }

  
  # Write to disk
 print $O "$txt\n";	      

  # Return 
  return( 0 );
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: main
#
# !DESCRIPTION: Routine main is the driver routine for the ncCodeDef script.
#\\
#\\
# !INTERFACE:
#
sub main() {
#
# !CALLING SEQUENCE:
#  &main();
#
# !REVISION HISTORY:
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/doGeos5
#EOP
#------------------------------------------------------------------------------
#BOC

  # Error check arguments
  if ( scalar( @ARGV ) == 0 ) { 
    print "Usage: ncCodeDef RESOURCE-FILE\n"; 
    exit(1);
  }

  # Get default values
  &readRcFile( $ARGV[0] );

  # Return normally
  return( 0 );
}
#EOC

#------------------------------------------------------------------------------

# Start main program
main();

# Exit normally
exit(0);
